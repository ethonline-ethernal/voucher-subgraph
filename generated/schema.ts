// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Voucher extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Voucher entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Voucher must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Voucher", id.toString(), this);
    }
  }

  static load(id: string): Voucher | null {
    return changetype<Voucher | null>(store.get("Voucher", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Name(): string | null {
    let value = this.get("Name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Name(value: string | null) {
    if (!value) {
      this.unset("Name");
    } else {
      this.set("Name", Value.fromString(<string>value));
    }
  }

  get Address(): string | null {
    let value = this.get("Address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Address(value: string | null) {
    if (!value) {
      this.unset("Address");
    } else {
      this.set("Address", Value.fromString(<string>value));
    }
  }

  get Type(): string | null {
    let value = this.get("Type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Type(value: string | null) {
    if (!value) {
      this.unset("Type");
    } else {
      this.set("Type", Value.fromString(<string>value));
    }
  }

  get TokenGateAddress(): string | null {
    let value = this.get("TokenGateAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set TokenGateAddress(value: string | null) {
    if (!value) {
      this.unset("TokenGateAddress");
    } else {
      this.set("TokenGateAddress", Value.fromString(<string>value));
    }
  }
}
